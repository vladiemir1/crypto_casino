import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from bot.handlers import router, set_bot
from config import settings
from database.database import init_db
from payment.webhook import app as webhook_app, set_bot as set_webhook_bot
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logging.getLogger("aiogram").setLevel(logging.CRITICAL)

TOKEN = settings.bot_token

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

set_bot(bot)
set_webhook_bot(bot)

dp.include_router(router)

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def start_webhook():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    config = uvicorn.Config(
        webhook_app,
        host="0.0.0.0",
        port=settings.webhook_port,
        log_level="info"
    )
    server = uvicorn.Server(config)
    print(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {settings.webhook_port}")
    await server.serve()

async def main():
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –∏ webhook –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        start_bot(),
        start_webhook()
    )

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    finally:
        loop.close()