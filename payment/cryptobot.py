import aiohttp
import hmac
import hashlib
import uuid
from typing import Dict, Optional
from config import settings
from utils.logger import logger
from database.crud import UserCRUD, GameCRUD, TransactionCRUD
from database.database import async_session_maker
from datetime import datetime


class CryptoBotAPI:
    BASE_URL = "https://pay.crypt.bot/api"
    
    def __init__(self, token: str):
        self.token = token
        self.headers = {
            "Crypto-Pay-API-Token": token,
            "Content-Type": "application/json"
        }

    async def create_invoice(self, asset: str, amount: float, description: str) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        url = f"{self.BASE_URL}/createInvoice"
        data = {
            "asset": asset,
            "amount": str(amount),
            "description": description
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=self.headers, json=data) as resp:
                result = await resp.json()
                if not result.get('ok'):
                    raise Exception(f"CryptoBot error: {result}")
                return result['result']

    async def transfer(self, user_id: int, asset: str, amount: float, spend_id: str) -> Dict:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        url = f"{self.BASE_URL}/transfer"
        data = {
            "user_id": user_id,
            "asset": asset,
            "amount": str(amount),
            "spend_id": spend_id,
            "comment": "–í—ã–∏–≥—Ä—ã—à –≤ –∫–∞–∑–∏–Ω–æ"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=self.headers, json=data) as resp:
                result = await resp.json()
                if not result.get('ok'):
                    raise Exception(f"Transfer error: {result}")
                return result['result']

    @staticmethod
    def verify_signature(body: bytes, signature: str, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å webhook"""
        expected = hmac.new(token.encode(), body, hashlib.sha256).hexdigest()
        return hmac.compare_digest(signature, expected)


# =====================================================
# ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–≥—Ä—ã
# =====================================================

async def create_game_and_invoice(telegram_id: int, game_type: str, bet_amount: float, currency: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç), —Å–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Å—á—ë—Ç —á–µ—Ä–µ–∑ CryptoBot.
    """
    async with async_session_maker() as session:
        try:
            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserCRUD.get_or_create(session, telegram_id)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø—Ä–æ–≤–µ—Ä–µ–Ω/—Å–æ–∑–¥–∞–Ω")

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É
            game_id = str(uuid.uuid4())
            game = await GameCRUD.create(
                session=session,
                game_id=game_id,
                user_id=user.id,
                game_type=game_type,
                bet_amount=bet_amount,
                currency=currency
            )
            logger.info(f"üéÆ –ò–≥—Ä–∞ {game_type} —Å–æ–∑–¥–∞–Ω–∞ (id={game_id})")

            # ‚úÖ –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å
            crypto_api = CryptoBotAPI(settings.cryptobot_token)
            invoice = await crypto_api.create_invoice(
                asset=currency,
                amount=bet_amount,
                description=f"–ò–≥—Ä–∞ {game_type}"
            )

            pay_url = invoice.get("pay_url")
            invoice_id = invoice.get("invoice_id")

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await TransactionCRUD.create(
                session=session,
                invoice_id=str(invoice_id),
                user_id=user.id,
                game_id=game.id,
                amount=bet_amount,
                currency=currency,
                pay_url=pay_url
            )

            logger.info(f"üí∞ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. Pay URL: {pay_url}")
            return pay_url

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_game_and_invoice: {e}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CryptoBot API
cryptobot = CryptoBotAPI(settings.cryptobot_token)
