from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
import json
import asyncio

from config import settings
from database.database import async_session_maker
from database.crud import TransactionCRUD, GameCRUD, UserCRUD
from database.models import GameResult
from payment.cryptobot import cryptobot

app = FastAPI(title="Casino Webhook Server")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = None

def set_bot(bot_instance):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot
    bot = bot_instance

@app.post("/webhook/cryptobot")
async def cryptobot_webhook(request: Request, background_tasks: BackgroundTasks):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç CryptoBot"""
    
    body = await request.body()
    signature = request.headers.get("crypto-pay-api-signature", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if not cryptobot.verify_signature(body, signature, settings.cryptobot_token):
        print(f"‚ùå Invalid webhook signature")
        raise HTTPException(403, "Invalid signature")
    
    try:
        data = json.loads(body)
    except json.JSONDecodeError:
        raise HTTPException(400, "Invalid JSON")
    
    print(f"üì• Webhook received: {data.get('update_type')}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–ø–ª–∞—Ç—ã
    if data['update_type'] == 'invoice_paid':
        background_tasks.add_task(process_payment, data['payload'])
    
    return {"ok": True}

async def process_payment(payload: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞"""
    invoice_id = payload['invoice_id']
    
    print(f"üí≥ Processing payment: {invoice_id}")
    
    async with async_session_maker() as session:
        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        tx = await TransactionCRUD.get_by_invoice_id(session, invoice_id)
        
        if not tx:
            print(f"‚ùå Transaction not found: {invoice_id}")
            return
        
        if tx.status != "pending":
            print(f"‚ö†Ô∏è Duplicate webhook: {invoice_id}")
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
        await TransactionCRUD.mark_as_paid(session, invoice_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É
        game = await GameCRUD.get_by_game_id(session, str(tx.game_id))
        
        if not game:
            print(f"‚ùå Game not found for transaction {invoice_id}")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –û–¢–ü–†–ê–í–õ–Ø–ï–ú DICE
        await send_dice_and_wait_result(tx.user_id, game)

async def send_dice_and_wait_result(user_id: int, game):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram Dice –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∏–≥—Ä—ã
    emoji_map = {
        "dice": "üé≤",
        "darts": "üéØ",
        "basketball": "üèÄ",
        "football": "‚öΩ",
        "bowling": "üé≥"
    }
    
    game_type = game.game_type.split("_")[0]
    emoji = emoji_map.get(game_type, "üé≤")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.send_message(
        user_id,
        "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω!</b>\n"
        "üéÆ –ë—Ä–æ—Å–∞–µ–º...",
        parse_mode="HTML"
    )
    
    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú DICE
    dice_message = await bot.send_dice(user_id, emoji=emoji)
    dice_value = dice_message.dice.value
    
    print(f"üé≤ Dice result: {dice_value} for game {game.game_id}")
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
    await asyncio.sleep(4)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    from bot.handlers import process_game_result
    await process_game_result(user_id, game.game_id, dice_value)