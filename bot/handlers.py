from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import uuid
import logging
from datetime import datetime
from sqlalchemy.sql import text
from aiocryptopay import Networks

from .keyboards import *
from .states import BetFlow
from game.football import FootballGame
from database.database import async_session_maker
from database.crud import UserCRUD, GameCRUD, TransactionCRUD
from database.models import GameResult, GameStatus, TransactionStatus
from payment.cryptobot import cryptobot

router = Router()
bot_instance = None
MIN_BET = 0.05
logger = logging.getLogger(__name__)

def set_bot(bot):
    global bot_instance
    bot_instance = bot


GAME_DESCRIPTIONS = {
    'dice_high': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –ë–æ–ª—å—à–µ (4-5-6)', 'coef': '1.8x'},
    'dice_low': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –ú–µ–Ω—å—à–µ (1-2-3)', 'coef': '1.8x'},
    'dice_odd': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –ù–µ—á–µ—Ç–Ω–æ–µ (1-3-5)', 'coef': '1.8x'},
    'dice_even': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –ß–µ—Ç–Ω–æ–µ (2-4-6)', 'coef': '1.8x'},
    'dice_num_1': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 1', 'coef': '3.1x'},
    'dice_num_2': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 2', 'coef': '3.1x'},
    'dice_num_3': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 3', 'coef': '3.1x'},
    'dice_num_4': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 4', 'coef': '3.1x'},
    'dice_num_5': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 5', 'coef': '3.1x'},
    'dice_num_6': {'emoji': 'üé≤', 'name': '–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 6', 'coef': '3.1x'},
    'darts_red': {'emoji': 'üéØ', 'name': '–î–ê–†–¢–°: –ö—Ä–∞—Å–Ω–æ–µ (2,4)', 'coef': '1.8x'},
    'darts_white': {'emoji': 'üéØ', 'name': '–î–ê–†–¢–°: –ë–µ–ª–æ–µ (3,5)', 'coef': '1.8x'},
    'darts_6': {'emoji': 'üéØ', 'name': '–î–ê–†–¢–°: –¶–µ–Ω—Ç—Ä (6)', 'coef': '2.5x'},
    'darts_1': {'emoji': 'üéØ', 'name': '–î–ê–†–¢–°: –ú–∏–º–æ (1)', 'coef': '2.5x'},
    'basketball_goal': {'emoji': 'üèÄ', 'name': '–ë–ê–°–ö–ï–¢–ë–û–õ: –ì–æ–ª (4-5)', 'coef': '1.8x'},
    'basketball_miss': {'emoji': 'üèÄ', 'name': '–ë–ê–°–ö–ï–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)', 'coef': '1.3x'},
    'football_goal': {'emoji': '‚öΩÔ∏è', 'name': '–§–£–¢–ë–û–õ: –ì–æ–ª (4-5)', 'coef': '1.8x'},
    'football_miss': {'emoji': '‚öΩÔ∏è', 'name': '–§–£–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)', 'coef': '1.3x'},
    'bowling_strike': {'emoji': 'üé≥', 'name': '–ë–û–£–õ–ò–ù–ì: –°—Ç—Ä–∞–π–∫ (6)', 'coef': '4.0x'},
    'bowling_nonstrike': {'emoji': 'üé≥', 'name': '–ë–û–£–õ–ò–ù–ì: –ù–µ —Å—Ç—Ä–∞–π–∫ (1-5)', 'coef': '1.2x'},
}

# ==================== –ö–û–ú–ê–ù–î–´ ====================

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ /start"""
    await state.clear()
    async with async_session_maker() as session:
        await UserCRUD.get_or_create(
            session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

    await message.answer(
        "üé∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Casino!</b>\n\n"
        "üéÆ –ò–≥—Ä–∞–π –≤ —á–µ—Å—Ç–Ω—ã–µ Telegram-–∏–≥—Ä—ã\n"
        "üí∞ –í—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n\n"
        "–í—Å–µ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç <b>Telegram Dice API</b> ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è Telegram!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )

@router.message(F.text == "üé∞ –ò–≥—Ä–∞—Ç—å")
async def show_games(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""
    await state.clear()
    await message.answer(
        "üéÆ <b>–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:</b>",
        reply_markup=get_games_menu(),
        parse_mode="HTML"
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    async with async_session_maker() as session:
        user = await UserCRUD.get_or_create(session, message.from_user.id)
        username = user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        total_games = user.games_played

        game_names = {
            'dice_high': 'üé≤ –ö–æ—Å—Ç–∏ (–ë–æ–ª—å—à–µ)',
            'dice_low': 'üé≤ –ö–æ—Å—Ç–∏ (–ú–µ–Ω—å—à–µ)',
            'dice_odd': 'üé≤ –ö–æ—Å—Ç–∏ (–ù–µ—á–µ—Ç–Ω–æ–µ)',
            'dice_even': 'üé≤ –ö–æ—Å—Ç–∏ (–ß–µ—Ç–Ω–æ–µ)',
            'dice_exact': 'üé≤ –ö–æ—Å—Ç–∏ (–¢–æ—á–Ω–æ–µ —á–∏—Å–ª–æ)',
            'darts': 'üéØ –î–∞—Ä—Ç—Å',
            'basketball': 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª',
            'football': '‚öΩÔ∏è –§—É—Ç–±–æ–ª',
            'bowling': 'üé≥ –ë–æ—É–ª–∏–Ω–≥'
        }

        favorite_game_query = await session.execute(
            text("""
                SELECT game_type, COUNT(*) as count 
                FROM games 
                WHERE user_id = :user_id AND status = 'COMPLETED' 
                GROUP BY game_type 
                ORDER BY count DESC 
                LIMIT 1
            """),
            {"user_id": user.id}
        )
        favorite_game_result = favorite_game_query.fetchone()
        
        if favorite_game_result:
            favorite_game_type = favorite_game_result[0]
            favorite_game = game_names.get(favorite_game_type, favorite_game_type)
            favorite_game_count = favorite_game_result[1]
        else:
            favorite_game = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            favorite_game_count = 0

        max_win_query = await session.execute(
            text("""
                SELECT MAX(payout - bet_amount) as max_win 
                FROM games 
                WHERE user_id = :user_id 
                AND status = 'COMPLETED' 
                AND result = 'WIN'
                AND payout > bet_amount
            """),
            {"user_id": user.id}
        )
        max_win = max_win_query.scalar() or 0.0

        stats_message = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚î£ –õ—é–±–∏–º–∞—è –∏–≥—Ä–∞: {favorite_game} [{favorite_game_count}]\n"
            f"‚î£ –°—ã–≥—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: {total_games}\n"
            f"‚îó –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: {max_win:.2f}$"
        )

        await message.answer(stats_message, parse_mode="HTML")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–∑–∏–Ω–æ"""
    await message.answer(
        "‚ÑπÔ∏è <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ –º–µ–Ω—é\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏\n"
        f"3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º {MIN_BET} USD)\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        "5Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ —Å—á—ë—Ç —á–µ—Ä–µ–∑ @CryptoBot\n"
        "6Ô∏è‚É£ –°–º–æ—Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –∞–Ω–∏–º–∞—Ü–∏–∏!\n"
        "7Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª ‚Äî –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        "üé≤ –í—Å–µ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç Telegram Dice API\n"
        "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Telegram (–Ω–µ –º—ã!)\n"
        "üîí –ü–æ–ª–Ω–∞—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å\n"
        "üíº –ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ: 10% (–≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞)\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @yoursupport",
        parse_mode="HTML"
    )

# ==================== –ö–û–°–¢–ò ====================

@router.callback_query(F.data == "game_dice")
async def game_dice(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üé≤ <b>–ö–û–°–¢–ò</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_dice_bet_types(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "dice_high")
async def dice_high_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "dice_high"
    await state.update_data(game_type=game_type, description="üé≤ <b>–ö–û–°–¢–ò: –ë–æ–ª—å—à–µ (4-5-6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≤ <b>–ö–û–°–¢–ò: –ë–æ–ª—å—à–µ (4-5-6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "dice_low")
async def dice_low_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "dice_low"
    await state.update_data(game_type=game_type, description="üé≤ <b>–ö–û–°–¢–ò: –ú–µ–Ω—å—à–µ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≤ <b>–ö–û–°–¢–ò: –ú–µ–Ω—å—à–µ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "dice_even")
async def dice_even_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "dice_even"
    await state.update_data(game_type=game_type, description="üé≤ <b>–ö–û–°–¢–ò: –ß–µ—Ç–Ω–æ–µ (2-4-6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≤ <b>–ö–û–°–¢–ò: –ß–µ—Ç–Ω–æ–µ (2-4-6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "dice_odd")
async def dice_odd_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "dice_odd"
    await state.update_data(game_type=game_type, description="üé≤ <b>–ö–û–°–¢–ò: –ù–µ—á–µ—Ç–Ω–æ–µ (1-3-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≤ <b>–ö–û–°–¢–ò: –ù–µ—á–µ—Ç–Ω–æ–µ (1-3-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "dice_exact")
async def dice_exact_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üé≤ –ö–û–°–¢–ò: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n\n"
        "‚ö°Ô∏è–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 3.1x\n"
        "–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ:",
        reply_markup=get_dice_exact_numbers()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("dice_num_"))
async def dice_exact_bet(callback: CallbackQuery, state: FSMContext):
    number = callback.data.split("_")[-1]
    game_type = f"dice_num_{number}"
    await state.update_data(game_type=game_type, description=f"üé≤ <b>–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ {number}</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>3.1x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        f"üé≤ <b>–ö–û–°–¢–ò: –£–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ {number}</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>3.1x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –î–ê–†–¢–° ====================

@router.callback_query(F.data == "game_darts")
async def game_darts(callback: CallbackQuery):
    await callback.message.answer(
        "üéØ <b>–î–ê–†–¢–°</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_darts_bet_types(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "darts_red")
async def darts_red_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "darts_red"
    await state.update_data(game_type=game_type, description="üéØ <b>–î–ê–†–¢–°: –ö—Ä–∞—Å–Ω–æ–µ (2,4)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üéØ <b>–î–ê–†–¢–°: –ö—Ä–∞—Å–Ω–æ–µ (2,4)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "darts_white")
async def darts_white_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "darts_white"
    await state.update_data(game_type=game_type, description="üéØ <b>–î–ê–†–¢–°: –ë–µ–ª–æ–µ (3,5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üéØ <b>–î–ê–†–¢–°: –ë–µ–ª–æ–µ (3,5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "darts_6")
async def darts_center_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "darts_6"
    await state.update_data(game_type=game_type, description="üéØ <b>–î–ê–†–¢–°: –¶–µ–Ω—Ç—Ä (6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>2.5x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üéØ <b>–î–ê–†–¢–°: –¶–µ–Ω—Ç—Ä (6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>2.5x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "darts_1")
async def darts_miss_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "darts_1"
    await state.update_data(game_type=game_type, description="üéØ <b>–î–ê–†–¢–°: –ú–∏–º–æ (1)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>2.5x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üéØ <b>–î–ê–†–¢–°: –ú–∏–º–æ (1)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>2.5x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –ë–ê–°–ö–ï–¢–ë–û–õ ====================

@router.callback_query(F.data == "game_basketball")
async def game_basketball(callback: CallbackQuery):
    await callback.message.answer(
        "üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_basketball_bet_types(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "basketball_goal")
async def basketball_goal_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "basketball_goal"
    await state.update_data(game_type=game_type, description="üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ: –ì–æ–ª (4-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ: –ì–æ–ª (4-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "basketball_miss")
async def basketball_miss_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "basketball_miss"
    await state.update_data(game_type=game_type, description="üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.3x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.3x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –§–£–¢–ë–û–õ ====================

@router.callback_query(F.data == "game_football")
async def game_football(callback: CallbackQuery):
    await callback.message.answer(
        "‚öΩÔ∏è <b>–§–£–¢–ë–û–õ</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_football_bet_types(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "football_goal")
async def football_goal_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "football_goal"
    await state.update_data(game_type=game_type, description="‚öΩÔ∏è <b>–§–£–¢–ë–û–õ: –ì–æ–ª (4-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "‚öΩÔ∏è <b>–§–£–¢–ë–û–õ: –ì–æ–ª (4-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.8x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "football_miss")
async def football_miss_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "football_miss"
    await state.update_data(game_type=game_type, description="‚öΩÔ∏è <b>–§–£–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.3x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "‚öΩÔ∏è <b>–§–£–¢–ë–û–õ: –ú–∏–º–æ (1-2-3)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.3x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –ë–û–£–õ–ò–ù–ì ====================

@router.callback_query(F.data == "game_bowling")
async def game_bowling(callback: CallbackQuery):
    await callback.message.answer(
        "üé≥ <b>–ë–û–£–õ–ò–ù–ì</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bowling_bet_types(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "bowling_strike")
async def bowling_strike_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "bowling_strike"
    await state.update_data(game_type=game_type, description="üé≥ <b>–ë–û–£–õ–ò–ù–ì: –°—Ç—Ä–∞–π–∫ (6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>4.0x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≥ <b>–ë–û–£–õ–ò–ù–ì: –°—Ç—Ä–∞–π–∫ (6)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>4.0x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "bowling_nonstrike")
async def bowling_nonstrike_bet(callback: CallbackQuery, state: FSMContext):
    game_type = "bowling_nonstrike"
    await state.update_data(game_type=game_type, description="üé≥ <b>–ë–û–£–õ–ò–ù–ì: –ù–µ —Å—Ç—Ä–∞–π–∫ (1-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.2x</b>")
    await state.set_state(BetFlow.entering_amount)
    await callback.message.answer(
        "üé≥ <b>–ë–û–£–õ–ò–ù–ì: –ù–µ —Å—Ç—Ä–∞–π–∫ (1-5)</b>\nüí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>1.2x</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–£–ú–ú–´ ====================

@router.callback_query(F.data.startswith("amount_"), BetFlow.entering_amount)
async def process_amount_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    if callback.data == "amount_custom":
        await callback.message.answer(
            f"‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 0.1 –∏–ª–∏ 2.5 –∏–ª–∏ 15</i>",
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    amount_str = callback.data.replace("amount_", "")
    try:
        amount = float(amount_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º—ã", show_alert=True)
        return

    if amount < MIN_BET:
        await callback.answer(f"‚ùå –ú–∏–Ω–∏–º—É–º {MIN_BET} USD", show_alert=True)
        return

    await state.update_data(amount=amount)
    await state.set_state(BetFlow.choosing_currency)
    
    data = await state.get_data()
    description = data.get("description", "")
    game_type = data.get("game_type", "")
    
    await callback.message.answer(
        f"{description}\n\n"
        f"üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <b>{amount} USD</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_currency_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(BetFlow.entering_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã"""
    text = message.text.strip().replace(",", ".")
    try:
        amount = float(text)
    except ValueError:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.1")
        return

    if amount < MIN_BET:
        await message.reply(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} USD")
        return

    await state.update_data(amount=amount)
    await state.set_state(BetFlow.choosing_currency)
    
    data = await state.get_data()
    description = data.get("description", "")
    game_type = data.get("game_type", "")
    
    await message.answer(
        f"{description}\n\n"
        f"üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <b>{amount} USD</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_currency_keyboard(game_type),
        parse_mode="HTML"
    )

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –í–ê–õ–Æ–¢–´ ====================

@router.callback_query(F.data.startswith("currency_"), BetFlow.choosing_currency)
async def process_currency(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.replace("currency_", "")
    
    data = await state.get_data()
    game_type = data.get("game_type")
    description = data.get("description")
    amount = data.get("amount")

    try:
        await create_game_and_invoice(callback, game_type, description, amount, currency, state)
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# ==================== –°–û–ó–î–ê–ù–ò–ï –ò–ì–†–´ –ò –ò–ù–í–û–ô–°–ê ====================

async def create_game_and_invoice(callback: CallbackQuery, game_type: str, description: str, amount: float, currency: str, state: FSMContext):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –∏–≥—Ä—ã, –∏–Ω–≤–æ–π—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async with async_session_maker() as session:
        user = await UserCRUD.get_or_create(
            session,
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )

        game_id = str(uuid.uuid4())
        
        game = await GameCRUD.create(
            session=session,
            game_id=game_id,
            user_id=user.id,
            game_type=game_type,
            bet_amount=amount,
            currency=currency
        )

        invoice_response = await cryptobot.create_invoice(
            asset=currency,
            amount=amount,
            description=f"–°—Ç–∞–≤–∫–∞ –≤ –∫–∞–∑–∏–Ω–æ: {game_type}"
        )

        invoice_id = str(invoice_response.get('invoice_id') or invoice_response.get('id') or uuid.uuid4())
        pay_url = invoice_response.get('bot_invoice_url') or invoice_response.get('pay_url') or invoice_response.get('url')

        if not pay_url:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        await TransactionCRUD.create(
            session=session,
            user_id=user.id,
            invoice_id=invoice_id,
            amount=amount,
            currency=currency,
            status=TransactionStatus.PENDING,
            game_id=game_id,
            pay_url=pay_url
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        game_info = GAME_DESCRIPTIONS.get(game_type, {'emoji': 'üéÆ', 'name': game_type, 'coef': '?'})
        
        # –†–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∏ —á–∏—Å—Ç–æ–π —Å—Ç–∞–≤–∫–∏
        commission = amount * 0.10
        net_bet = amount * 0.90
        
        await session.commit()

        # ‚úÖ –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –≠–ú–û–î–ó–ò
        await callback.message.answer(
            f"‚úÖ <b>–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"{game_info['emoji']} –ò–≥—Ä–∞: <b>{game_info['name']}</b>\n"
            f"‚ö°Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{game_info['coef']}</b>\n\n"
            f"üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <b>{amount} {currency}</b>\n"
            f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –∫–∞–∑–∏–Ω–æ: <b>{commission:.4f} {currency}</b> (10%)\n"
            f"üöÄ –ß–∏—Å—Ç–∞—è —Å—Ç–∞–≤–∫–∞: <b>{net_bet:.4f} {currency}</b>\n\n"
            f"–û–ø–ª–∞—Ç–∏ —Å—á—ë—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)
            ]]),
            parse_mode="HTML"
        )

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ù–ê–ó–ê–î ====================

@router.callback_query(F.data.startswith("back_to_bet_"))
async def back_to_bet_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏ –∏–∑ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã"""
    await state.clear()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º game_type –∏–∑ callback_data
    game_type = callback.data.replace("back_to_bet_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π –∏–≥—Ä–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    if game_type.startswith("dice"):
        if game_type.startswith("dice_num"):
            # –ï—Å–ª–∏ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∏—Å–µ–ª
            await callback.message.edit_text(
                "üé≤ –ö–û–°–¢–ò: –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n\n‚ö°Ô∏è–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 3.1x\n–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ:",
                reply_markup=get_dice_exact_numbers()
            )
        else:
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∏–ø–∞–º —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–æ—Å—Ç–∏
            await callback.message.edit_text(
                "üé≤ <b>–ö–û–°–¢–ò</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
                reply_markup=get_dice_bet_types(),
                parse_mode="HTML"
            )
    elif game_type.startswith("darts"):
        await callback.message.edit_text(
            "üéØ <b>–î–ê–†–¢–°</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_darts_bet_types(),
            parse_mode="HTML"
        )
    elif game_type.startswith("basketball"):
        await callback.message.edit_text(
            "üèÄ <b>–ë–ê–°–ö–ï–¢–ë–û–õ</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_basketball_bet_types(),
            parse_mode="HTML"
        )
    elif game_type.startswith("football"):
        await callback.message.edit_text(
            "‚öΩÔ∏è <b>–§–£–¢–ë–û–õ</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_football_bet_types(),
            parse_mode="HTML"
        )
    elif game_type.startswith("bowling"):
        await callback.message.edit_text(
            "üé≥ <b>–ë–û–£–õ–ò–ù–ì</b>\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:",
            reply_markup=get_bowling_bet_types(),
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ game_type –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä
        await callback.message.edit_text(
            "üéÆ <b>–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:</b>",
            reply_markup=get_games_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.callback_query(F.data == "back_to_amount")
async def back_to_amount_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã –∏–∑ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    data = await state.get_data()
    game_type = data.get("game_type", "")
    description = data.get("description", "–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    await state.set_state(BetFlow.entering_amount)
    
    await callback.message.edit_text(
        f"{description}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º {MIN_BET} USD):",
        reply_markup=get_amount_keyboard(game_type),
        parse_mode="HTML"
    )
    await callback.answer()


# ==================== –û–¢–ú–ï–ù–ê –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

@router.callback_query(F.data == "cancel")
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "back_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_games")
async def back_to_games(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä"""
    await state.clear()
    await callback.message.edit_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:</b>",
        reply_markup=get_games_menu(),
        parse_mode="HTML"
    )
    await callback.answer()