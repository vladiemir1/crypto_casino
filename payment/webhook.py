from fastapi import FastAPI, Request, BackgroundTasks
import json
import traceback
import uuid
import logging

from database.database import async_session_maker
from database.crud import TransactionCRUD, GameCRUD, UserCRUD
from database.models import GameResult, User, Game, TransactionStatus
from payment.cryptobot import cryptobot
from config import settings
from aiogram import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import text  # ‚úÖ –Ω—É–∂–Ω–æ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
dp = None


# --- ‚úÖ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def mark_game_completed(game_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ COMPLETED, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å –µ—ë –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
    try:
        async with async_session_maker() as session:
            await session.execute(
                text("UPDATE games SET status = 'COMPLETED' WHERE game_id = :game_id"),
                {"game_id": game_id}
            )
            await session.commit()
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã {game_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ COMPLETED")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã {game_id}: {e}")


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ ---
def set_webhook_bot(bot_instance):
    global bot
    bot = bot_instance
    logger.info("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def set_webhook_dispatcher(dispatcher):
    global dp
    dp = dispatcher
    logger.info("Dispatcher —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ ---
def setup_webhooks(app: FastAPI):
    @app.post(settings.WEBHOOK_PATH)
    async def telegram_webhook(request: Request, background_tasks: BackgroundTasks):
        body = await request.body()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å webhook: {body.decode('utf-8')}")
        try:
            data = json.loads(body)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç CryptoBot
            if data.get("update_type") == "invoice_paid":
                payload = data.get("payload", {})
                background_tasks.add_task(process_payment, payload)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            elif bot and dp:
                await dp.feed_raw_update(bot, data)
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            else:
                logger.warning("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: bot –∏–ª–∏ dp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            return {"error": "Invalid JSON"}, 400
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
            traceback.print_exc()
        return {"ok": True}

    logger.info("Webhook endpoints registered")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ ---
async def process_payment(payload: dict):
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {payload}")
    try:
        invoice_id = payload.get("invoice_id") or payload.get("id")
        if not invoice_id:
            logger.error("invoice_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        async with async_session_maker() as session:
            tx = await TransactionCRUD.get_by_invoice_id(session, str(invoice_id))
            if not tx:
                logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {invoice_id}")
                return

            if tx.status != TransactionStatus.PENDING:
                logger.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING, invoice={invoice_id}")
                return

            await TransactionCRUD.update_status(session, tx, TransactionStatus.PAID)

            game = await session.get(Game, tx.game_id)
            if not game:
                logger.error(f"–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {invoice_id}")
                return

            user = await session.get(User, game.user_id)
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game.game_id}")
                return

            await send_dice_and_wait_result(user.telegram_id, game, tx)

    except Exception as exc:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ process_payment: {exc}")
        traceback.print_exc()


# --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---
async def send_dice_and_wait_result(user_telegram_id: int, game: Game, tx):
    if bot is None:
        logger.error("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    emoji_map = {
        "dice": "üé≤",
        "darts": "üéØ",
        "basketball": "üèÄ",
        "football": "‚öΩÔ∏è",
        "bowling": "üé≥"
    }

    game_type = (game.game_type or "").split("_")[0]
    emoji = emoji_map.get(game_type, "üé≤")

    try:
        await bot.send_message(user_telegram_id, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –±—Ä–æ—Å–∞–µ–º...", parse_mode="HTML")
        dice_message = await bot.send_dice(chat_id=user_telegram_id, emoji=emoji)
        dice_value = dice_message.dice.value if dice_message and dice_message.dice else None

        if dice_value is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ Dice –¥–ª—è –∏–≥—Ä—ã {game.game_id}")
            await bot.send_message(user_telegram_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞.", parse_mode="HTML")
            return

        win, multiplier = evaluate_game_result(game.game_type, dice_value)
        bet_amount = float(game.bet_amount or 0.0)
        payout = 0.0

        if win and multiplier and bet_amount > 0:
            net_bet = bet_amount * 0.90  # 10% –∫–æ–º–∏—Å—Å–∏—è
            payout = round(net_bet * float(multiplier), 2)

        result_enum = GameResult.WIN if win else GameResult.LOSS

        async with async_session_maker() as session:
            await GameCRUD.complete_game(session, game, result_enum, payout)

        # --- ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ COMPLETED ---
        await mark_game_completed(game.game_id)

        # --- –í—ã–ø–ª–∞—Ç–∞ ---
        if payout > 0:
            try:
                check_result = await cryptobot.create_check(asset=game.currency, amount=payout)
                check_url = check_result.get('bot_check_url') or check_result.get('url')

                logger.info(f"‚úÖ –ß–µ–∫ –Ω–∞ {payout} {game.currency} —Å–æ–∑–¥–∞–Ω: {check_url}")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à", url=check_url)
                ]])

                await bot.send_message(
                    user_telegram_id,
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!</b>\n\n"
                    f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{dice_value}</b>\n"
                    f"üí∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{payout} {game.currency}</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ üëá",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
                await bot.send_message(
                    user_telegram_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –≤—ã–ø–ª–∞—Ç—ã: {e}",
                    parse_mode="HTML"
                )
        else:
            await bot.send_message(
                user_telegram_id,
                f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{dice_value}</b>\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à",
                parse_mode="HTML"
            )

    except Exception as exc:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ send_dice_and_wait_result: {exc}")
        traceback.print_exc()
        await bot.send_message(user_telegram_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã: {exc}", parse_mode="HTML")


# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ---
def evaluate_game_result(game_type: str, dice_value: int):
    if dice_value is None:
        return False, None

    parts = (game_type or "").split("_")
    game = parts[0] if parts else ""

    if game == "dice":
        mode = parts[1] if len(parts) > 1 else ""
        if mode == "high":
            return dice_value >= 4, 1.8
        elif mode == "low":
            return dice_value <= 3, 1.8
        elif mode == "even":
            return dice_value % 2 == 0, 1.8
        elif mode == "odd":
            return dice_value % 2 == 1, 1.8
        elif mode == "num":
            target = int(parts[2]) if len(parts) > 2 else 0
            return dice_value == target, 3.1
    elif game == "darts":
        mode = parts[1] if len(parts) > 1 else ""
        if mode == "red":
            return dice_value in [2, 4], 1.8
        elif mode == "white":
            return dice_value in [3, 5], 1.8
        elif mode == "6":
            return dice_value == 6, 2.5
        elif mode == "1":
            return dice_value == 1, 2.5
    elif game == "basketball":
        mode = parts[1] if len(parts) > 1 else ""
        if mode == "goal":
            return dice_value in [4, 5], 1.8
        elif mode == "miss":
            return dice_value in [1, 2, 3], 1.3
    elif game == "football":
        mode = parts[1] if len(parts) > 1 else ""
        if mode == "goal":
            return dice_value in [4, 5], 1.8
        elif mode == "miss":
            return dice_value in [1, 2, 3], 1.3
    elif game == "bowling":
        mode = parts[1] if len(parts) > 1 else ""
        if mode == "strike":
            return dice_value == 6, 4.0
        elif mode == "nonstrike":
            return dice_value in [1, 2, 3, 4, 5], 1.2
    return False, None
